# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msgs/map_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import msgs.msg

class map_msg(genpy.Message):
  _md5sum = "74bec9aa085584f3c79b706501e2c126"
  _type = "msgs/map_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 path_id
int16 left_path_id
int16 right_path_id
int16[] succesors
int16[] predecessors

point_msg[] center


================================================================================
MSG: msgs/point_msg
float64 x
float64 y
float64 s
float64 d

"""
  __slots__ = ['path_id','left_path_id','right_path_id','succesors','predecessors','center']
  _slot_types = ['int16','int16','int16','int16[]','int16[]','msgs/point_msg[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path_id,left_path_id,right_path_id,succesors,predecessors,center

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(map_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.path_id is None:
        self.path_id = 0
      if self.left_path_id is None:
        self.left_path_id = 0
      if self.right_path_id is None:
        self.right_path_id = 0
      if self.succesors is None:
        self.succesors = []
      if self.predecessors is None:
        self.predecessors = []
      if self.center is None:
        self.center = []
    else:
      self.path_id = 0
      self.left_path_id = 0
      self.right_path_id = 0
      self.succesors = []
      self.predecessors = []
      self.center = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3h().pack(_x.path_id, _x.left_path_id, _x.right_path_id))
      length = len(self.succesors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.succesors))
      length = len(self.predecessors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.predecessors))
      length = len(self.center)
      buff.write(_struct_I.pack(length))
      for val1 in self.center:
        _x = val1
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.s, _x.d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.center is None:
        self.center = None
      end = 0
      _x = self
      start = end
      end += 6
      (_x.path_id, _x.left_path_id, _x.right_path_id,) = _get_struct_3h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.succesors = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.predecessors = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.center = []
      for i in range(0, length):
        val1 = msgs.msg.point_msg()
        _x = val1
        start = end
        end += 32
        (_x.x, _x.y, _x.s, _x.d,) = _get_struct_4d().unpack(str[start:end])
        self.center.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3h().pack(_x.path_id, _x.left_path_id, _x.right_path_id))
      length = len(self.succesors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.succesors.tostring())
      length = len(self.predecessors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.predecessors.tostring())
      length = len(self.center)
      buff.write(_struct_I.pack(length))
      for val1 in self.center:
        _x = val1
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.s, _x.d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.center is None:
        self.center = None
      end = 0
      _x = self
      start = end
      end += 6
      (_x.path_id, _x.left_path_id, _x.right_path_id,) = _get_struct_3h().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.succesors = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.predecessors = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.center = []
      for i in range(0, length):
        val1 = msgs.msg.point_msg()
        _x = val1
        start = end
        end += 32
        (_x.x, _x.y, _x.s, _x.d,) = _get_struct_4d().unpack(str[start:end])
        self.center.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3h = None
def _get_struct_3h():
    global _struct_3h
    if _struct_3h is None:
        _struct_3h = struct.Struct("<3h")
    return _struct_3h
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
