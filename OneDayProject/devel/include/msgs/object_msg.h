// Generated by gencpp from file msgs/object_msg.msg
// DO NOT EDIT!


#ifndef MSGS_MESSAGE_OBJECT_MSG_H
#define MSGS_MESSAGE_OBJECT_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgs
{
template <class ContainerAllocator>
struct object_msg_
{
  typedef object_msg_<ContainerAllocator> Type;

  object_msg_()
    : id(0)
    , mode(0)
    , status(0)
    , x(0.0)
    , y(0.0)
    , vx(0.0)
    , vy(0.0)
    , ax(0.0)
    , ay(0.0)
    , size_x(0.0)
    , size_y(0.0)
    , orientation(0.0)  {
    }
  object_msg_(const ContainerAllocator& _alloc)
    : id(0)
    , mode(0)
    , status(0)
    , x(0.0)
    , y(0.0)
    , vx(0.0)
    , vy(0.0)
    , ax(0.0)
    , ay(0.0)
    , size_x(0.0)
    , size_y(0.0)
    , orientation(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef uint8_t _status_type;
  _status_type status;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _vx_type;
  _vx_type vx;

   typedef double _vy_type;
  _vy_type vy;

   typedef double _ax_type;
  _ax_type ax;

   typedef double _ay_type;
  _ay_type ay;

   typedef double _size_x_type;
  _size_x_type size_x;

   typedef double _size_y_type;
  _size_y_type size_y;

   typedef double _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::msgs::object_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs::object_msg_<ContainerAllocator> const> ConstPtr;

}; // struct object_msg_

typedef ::msgs::object_msg_<std::allocator<void> > object_msg;

typedef boost::shared_ptr< ::msgs::object_msg > object_msgPtr;
typedef boost::shared_ptr< ::msgs::object_msg const> object_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs::object_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs::object_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs::object_msg_<ContainerAllocator1> & lhs, const ::msgs::object_msg_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.mode == rhs.mode &&
    lhs.status == rhs.status &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.ax == rhs.ax &&
    lhs.ay == rhs.ay &&
    lhs.size_x == rhs.size_x &&
    lhs.size_y == rhs.size_y &&
    lhs.orientation == rhs.orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs::object_msg_<ContainerAllocator1> & lhs, const ::msgs::object_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgs::object_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs::object_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::object_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::object_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::object_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::object_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs::object_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8dcaecefb527431a134307cc7d2d00d0";
  }

  static const char* value(const ::msgs::object_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8dcaecefb527431aULL;
  static const uint64_t static_value2 = 0x134307cc7d2d00d0ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs::object_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs/object_msg";
  }

  static const char* value(const ::msgs::object_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs::object_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"int32 mode\n"
"uint8 status\n"
"float64 x\n"
"float64 y\n"
"float64 vx\n"
"float64 vy\n"
"float64 ax\n"
"float64 ay\n"
"float64 size_x\n"
"float64 size_y\n"
"float64 orientation\n"
;
  }

  static const char* value(const ::msgs::object_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs::object_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.mode);
      stream.next(m.status);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.ax);
      stream.next(m.ay);
      stream.next(m.size_x);
      stream.next(m.size_y);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct object_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs::object_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs::object_msg_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "vx: ";
    Printer<double>::stream(s, indent + "  ", v.vx);
    s << indent << "vy: ";
    Printer<double>::stream(s, indent + "  ", v.vy);
    s << indent << "ax: ";
    Printer<double>::stream(s, indent + "  ", v.ax);
    s << indent << "ay: ";
    Printer<double>::stream(s, indent + "  ", v.ay);
    s << indent << "size_x: ";
    Printer<double>::stream(s, indent + "  ", v.size_x);
    s << indent << "size_y: ";
    Printer<double>::stream(s, indent + "  ", v.size_y);
    s << indent << "orientation: ";
    Printer<double>::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_MESSAGE_OBJECT_MSG_H
