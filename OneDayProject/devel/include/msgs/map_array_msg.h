// Generated by gencpp from file msgs/map_array_msg.msg
// DO NOT EDIT!


#ifndef MSGS_MESSAGE_MAP_ARRAY_MSG_H
#define MSGS_MESSAGE_MAP_ARRAY_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <msgs/map_msg.h>

namespace msgs
{
template <class ContainerAllocator>
struct map_array_msg_
{
  typedef map_array_msg_<ContainerAllocator> Type;

  map_array_msg_()
    : data()
    , time()  {
    }
  map_array_msg_(const ContainerAllocator& _alloc)
    : data(_alloc)
    , time()  {
  (void)_alloc;
    }



   typedef std::vector< ::msgs::map_msg_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::msgs::map_msg_<ContainerAllocator> >> _data_type;
  _data_type data;

   typedef ros::Time _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::msgs::map_array_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs::map_array_msg_<ContainerAllocator> const> ConstPtr;

}; // struct map_array_msg_

typedef ::msgs::map_array_msg_<std::allocator<void> > map_array_msg;

typedef boost::shared_ptr< ::msgs::map_array_msg > map_array_msgPtr;
typedef boost::shared_ptr< ::msgs::map_array_msg const> map_array_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs::map_array_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs::map_array_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs::map_array_msg_<ContainerAllocator1> & lhs, const ::msgs::map_array_msg_<ContainerAllocator2> & rhs)
{
  return lhs.data == rhs.data &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs::map_array_msg_<ContainerAllocator1> & lhs, const ::msgs::map_array_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgs::map_array_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs::map_array_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::map_array_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::map_array_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::map_array_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::map_array_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs::map_array_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b1600958de547559bb606d694ebf501a";
  }

  static const char* value(const ::msgs::map_array_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb1600958de547559ULL;
  static const uint64_t static_value2 = 0xbb606d694ebf501aULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs::map_array_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs/map_array_msg";
  }

  static const char* value(const ::msgs::map_array_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs::map_array_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "map_msg[] data\n"
"time time\n"
"\n"
"\n"
"================================================================================\n"
"MSG: msgs/map_msg\n"
"int16 path_id\n"
"int16 left_path_id\n"
"int16 right_path_id\n"
"int16[] succesors\n"
"int16[] predecessors\n"
"\n"
"point_msg[] center\n"
"\n"
"\n"
"================================================================================\n"
"MSG: msgs/point_msg\n"
"float64 x\n"
"float64 y\n"
"float64 s\n"
"float64 d\n"
"\n"
;
  }

  static const char* value(const ::msgs::map_array_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs::map_array_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct map_array_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs::map_array_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs::map_array_msg_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::msgs::map_msg_<ContainerAllocator> >::stream(s, indent + "    ", v.data[i]);
    }
    s << indent << "time: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_MESSAGE_MAP_ARRAY_MSG_H
