// Generated by gencpp from file msgs/map_msg.msg
// DO NOT EDIT!


#ifndef MSGS_MESSAGE_MAP_MSG_H
#define MSGS_MESSAGE_MAP_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <msgs/point_msg.h>

namespace msgs
{
template <class ContainerAllocator>
struct map_msg_
{
  typedef map_msg_<ContainerAllocator> Type;

  map_msg_()
    : path_id(0)
    , left_path_id(0)
    , right_path_id(0)
    , succesors()
    , predecessors()
    , center()  {
    }
  map_msg_(const ContainerAllocator& _alloc)
    : path_id(0)
    , left_path_id(0)
    , right_path_id(0)
    , succesors(_alloc)
    , predecessors(_alloc)
    , center(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _path_id_type;
  _path_id_type path_id;

   typedef int16_t _left_path_id_type;
  _left_path_id_type left_path_id;

   typedef int16_t _right_path_id_type;
  _right_path_id_type right_path_id;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _succesors_type;
  _succesors_type succesors;

   typedef std::vector<int16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int16_t>> _predecessors_type;
  _predecessors_type predecessors;

   typedef std::vector< ::msgs::point_msg_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::msgs::point_msg_<ContainerAllocator> >> _center_type;
  _center_type center;





  typedef boost::shared_ptr< ::msgs::map_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs::map_msg_<ContainerAllocator> const> ConstPtr;

}; // struct map_msg_

typedef ::msgs::map_msg_<std::allocator<void> > map_msg;

typedef boost::shared_ptr< ::msgs::map_msg > map_msgPtr;
typedef boost::shared_ptr< ::msgs::map_msg const> map_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs::map_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs::map_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs::map_msg_<ContainerAllocator1> & lhs, const ::msgs::map_msg_<ContainerAllocator2> & rhs)
{
  return lhs.path_id == rhs.path_id &&
    lhs.left_path_id == rhs.left_path_id &&
    lhs.right_path_id == rhs.right_path_id &&
    lhs.succesors == rhs.succesors &&
    lhs.predecessors == rhs.predecessors &&
    lhs.center == rhs.center;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs::map_msg_<ContainerAllocator1> & lhs, const ::msgs::map_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgs::map_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs::map_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::map_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::map_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::map_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::map_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs::map_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "74bec9aa085584f3c79b706501e2c126";
  }

  static const char* value(const ::msgs::map_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x74bec9aa085584f3ULL;
  static const uint64_t static_value2 = 0xc79b706501e2c126ULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs::map_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs/map_msg";
  }

  static const char* value(const ::msgs::map_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs::map_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 path_id\n"
"int16 left_path_id\n"
"int16 right_path_id\n"
"int16[] succesors\n"
"int16[] predecessors\n"
"\n"
"point_msg[] center\n"
"\n"
"\n"
"================================================================================\n"
"MSG: msgs/point_msg\n"
"float64 x\n"
"float64 y\n"
"float64 s\n"
"float64 d\n"
"\n"
;
  }

  static const char* value(const ::msgs::map_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs::map_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.path_id);
      stream.next(m.left_path_id);
      stream.next(m.right_path_id);
      stream.next(m.succesors);
      stream.next(m.predecessors);
      stream.next(m.center);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct map_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs::map_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs::map_msg_<ContainerAllocator>& v)
  {
    s << indent << "path_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.path_id);
    s << indent << "left_path_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.left_path_id);
    s << indent << "right_path_id: ";
    Printer<int16_t>::stream(s, indent + "  ", v.right_path_id);
    s << indent << "succesors[]" << std::endl;
    for (size_t i = 0; i < v.succesors.size(); ++i)
    {
      s << indent << "  succesors[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.succesors[i]);
    }
    s << indent << "predecessors[]" << std::endl;
    for (size_t i = 0; i < v.predecessors.size(); ++i)
    {
      s << indent << "  predecessors[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.predecessors[i]);
    }
    s << indent << "center[]" << std::endl;
    for (size_t i = 0; i < v.center.size(); ++i)
    {
      s << indent << "  center[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::msgs::point_msg_<ContainerAllocator> >::stream(s, indent + "    ", v.center[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_MESSAGE_MAP_MSG_H
