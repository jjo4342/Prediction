// Generated by gencpp from file msgs/dataset_msg.msg
// DO NOT EDIT!


#ifndef MSGS_MESSAGE_DATASET_MSG_H
#define MSGS_MESSAGE_DATASET_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace msgs
{
template <class ContainerAllocator>
struct dataset_msg_
{
  typedef dataset_msg_<ContainerAllocator> Type;

  dataset_msg_()
    : id(0)
    , lane_id(0)
    , length(0.0)
    , width(0.0)
    , x()
    , y()
    , yaw()
    , vx()
    , vy()
    , s()
    , d()
    , mask()
    , mode(0)  {
    }
  dataset_msg_(const ContainerAllocator& _alloc)
    : id(0)
    , lane_id(0)
    , length(0.0)
    , width(0.0)
    , x(_alloc)
    , y(_alloc)
    , yaw(_alloc)
    , vx(_alloc)
    , vy(_alloc)
    , s(_alloc)
    , d(_alloc)
    , mask(_alloc)
    , mode(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _lane_id_type;
  _lane_id_type lane_id;

   typedef float _length_type;
  _length_type length;

   typedef float _width_type;
  _width_type width;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _x_type;
  _x_type x;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _y_type;
  _y_type y;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _yaw_type;
  _yaw_type yaw;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _vx_type;
  _vx_type vx;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _vy_type;
  _vy_type vy;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _s_type;
  _s_type s;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _d_type;
  _d_type d;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _mask_type;
  _mask_type mask;

   typedef int32_t _mode_type;
  _mode_type mode;





  typedef boost::shared_ptr< ::msgs::dataset_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msgs::dataset_msg_<ContainerAllocator> const> ConstPtr;

}; // struct dataset_msg_

typedef ::msgs::dataset_msg_<std::allocator<void> > dataset_msg;

typedef boost::shared_ptr< ::msgs::dataset_msg > dataset_msgPtr;
typedef boost::shared_ptr< ::msgs::dataset_msg const> dataset_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msgs::dataset_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msgs::dataset_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msgs::dataset_msg_<ContainerAllocator1> & lhs, const ::msgs::dataset_msg_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.lane_id == rhs.lane_id &&
    lhs.length == rhs.length &&
    lhs.width == rhs.width &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.yaw == rhs.yaw &&
    lhs.vx == rhs.vx &&
    lhs.vy == rhs.vy &&
    lhs.s == rhs.s &&
    lhs.d == rhs.d &&
    lhs.mask == rhs.mask &&
    lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msgs::dataset_msg_<ContainerAllocator1> & lhs, const ::msgs::dataset_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::msgs::dataset_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msgs::dataset_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::dataset_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msgs::dataset_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::dataset_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msgs::dataset_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msgs::dataset_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cc7ab277cce2b49147bf262deae10b1d";
  }

  static const char* value(const ::msgs::dataset_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcc7ab277cce2b491ULL;
  static const uint64_t static_value2 = 0x47bf262deae10b1dULL;
};

template<class ContainerAllocator>
struct DataType< ::msgs::dataset_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msgs/dataset_msg";
  }

  static const char* value(const ::msgs::dataset_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msgs::dataset_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"int32 lane_id\n"
"float32 length\n"
"float32 width\n"
"float64[] x\n"
"float64[] y\n"
"float64[] yaw\n"
"float64[] vx\n"
"float64[] vy\n"
"float64[] s\n"
"float64[] d\n"
"int32[] mask\n"
"int32 mode\n"
;
  }

  static const char* value(const ::msgs::dataset_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msgs::dataset_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.lane_id);
      stream.next(m.length);
      stream.next(m.width);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.yaw);
      stream.next(m.vx);
      stream.next(m.vy);
      stream.next(m.s);
      stream.next(m.d);
      stream.next(m.mask);
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dataset_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msgs::dataset_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msgs::dataset_msg_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "lane_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.lane_id);
    s << indent << "length: ";
    Printer<float>::stream(s, indent + "  ", v.length);
    s << indent << "width: ";
    Printer<float>::stream(s, indent + "  ", v.width);
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "yaw[]" << std::endl;
    for (size_t i = 0; i < v.yaw.size(); ++i)
    {
      s << indent << "  yaw[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.yaw[i]);
    }
    s << indent << "vx[]" << std::endl;
    for (size_t i = 0; i < v.vx.size(); ++i)
    {
      s << indent << "  vx[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vx[i]);
    }
    s << indent << "vy[]" << std::endl;
    for (size_t i = 0; i < v.vy.size(); ++i)
    {
      s << indent << "  vy[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.vy[i]);
    }
    s << indent << "s[]" << std::endl;
    for (size_t i = 0; i < v.s.size(); ++i)
    {
      s << indent << "  s[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.s[i]);
    }
    s << indent << "d[]" << std::endl;
    for (size_t i = 0; i < v.d.size(); ++i)
    {
      s << indent << "  d[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.d[i]);
    }
    s << indent << "mask[]" << std::endl;
    for (size_t i = 0; i < v.mask.size(); ++i)
    {
      s << indent << "  mask[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.mask[i]);
    }
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSGS_MESSAGE_DATASET_MSG_H
